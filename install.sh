#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ -z "$1" ] || [ -z "$2" ]; then
    echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./install_remna_node.sh <SELF_STEAL_DOMAIN> <SSL_CERT>"
    echo "–ü—Ä–∏–º–µ—Ä:"
    echo "./install_remna_node.sh steel.example.com \"-----BEGIN CERTIFICATE-----\\n...\""
    exit 1
fi

SELF_STEAL_DOMAIN="$1"
SSL_CERT="$2"
APP_PORT="2222"
SELF_STEAL_PORT="9443"

echo "üß© –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: curl, iptables, ipset, docker, docker-compose"
sudo apt update
sudo apt install -y curl iptables ipset ca-certificates gnupg lsb-release

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
if ! command -v docker >/dev/null; then
    echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    curl -fsSL https://get.docker.com | sh
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose Plugin (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
if ! docker compose version >/dev/null 2>&1; then
    echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose plugin..."
    DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
    mkdir -p $DOCKER_CONFIG/cli-plugins
    curl -SL https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
    chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
fi

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/remnanode"
mkdir -p /opt/remnanode && cd /opt/remnanode

echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è RemnaNode"
cat > .env <<EOF
APP_PORT=${APP_PORT}
SSL_CERT=${SSL_CERT}
EOF

echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml –¥–ª—è RemnaNode"
cat > docker-compose.yml <<EOF
services:
  remnanode:
    container_name: remnanode
    hostname: remnanode
    image: remnawave/node:latest
    restart: always
    network_mode: host
    env_file:
      - .env
EOF

echo "üöÄ –ó–∞–ø—É—Å–∫ RemnaNode –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
docker compose up -d

echo "‚úÖ RemnaNode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏, —É–∫–∞–∑–∞–≤:"
echo " - IP —Å–µ—Ä–≤–µ—Ä–∞"
echo " - –ü–æ—Ä—Ç: ${APP_PORT}"

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/selfsteel"
mkdir -p /opt/selfsteel && cd /opt/selfsteel

echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è Selfsteel"
cat > .env <<EOF
SELF_STEAL_DOMAIN=${SELF_STEAL_DOMAIN}
SELF_STEAL_PORT=${SELF_STEAL_PORT}
EOF

echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ Caddyfile"
cat > Caddyfile <<EOF
{
    https_port {\$SELF_STEAL_PORT}
    default_bind 127.0.0.1
    servers {
        listener_wrappers {
            proxy_protocol {
                allow 127.0.0.1/32
            }
            tls
        }
    }
    auto_https disable_redirects
}

http://{\$SELF_STEAL_DOMAIN} {
    bind 0.0.0.0
    redir https://{\$SELF_STEAL_DOMAIN}{uri} permanent
}

https://{\$SELF_STEAL_DOMAIN} {
    root * /var/www/html
    try_files {path} /index.html
    file_server
}

:{\$SELF_STEAL_PORT} {
    tls internal
    respond 204
}

:80 {
    bind 0.0.0.0
    respond 204
}
EOF

echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml –¥–ª—è Selfsteel"
cat > docker-compose.yml <<EOF
services:
  caddy:
    image: caddy:2.9.1
    container_name: caddy-remnawave
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ../html:/var/www/html
      - ./logs:/var/log/caddy
      - caddy_data_selfsteal:/data
      - caddy_config_selfsteal:/config
    env_file:
      - .env
    network_mode: "host"

volumes:
  caddy_data_selfsteal:
  caddy_config_selfsteal:
EOF

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ index.html"
mkdir -p /opt/html
echo "<h1>Welcome to ${SELF_STEAL_DOMAIN}</h1>" > /opt/html/index.html

echo "üöÄ –ó–∞–ø—É—Å–∫ Selfsteel –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (Caddy)"
docker compose up -d

echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
